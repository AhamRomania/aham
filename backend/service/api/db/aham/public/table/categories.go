//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Categories = newCategoriesTable("public", "categories", "")

type categoriesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Name        postgres.ColumnString
	Slug        postgres.ColumnString
	Description postgres.ColumnString
	Parent      postgres.ColumnInteger
	Sort        postgres.ColumnInteger
	Pricing     postgres.ColumnBool
	Hidden      postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CategoriesTable struct {
	categoriesTable

	EXCLUDED categoriesTable
}

// AS creates new CategoriesTable with assigned alias
func (a CategoriesTable) AS(alias string) *CategoriesTable {
	return newCategoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CategoriesTable with assigned schema name
func (a CategoriesTable) FromSchema(schemaName string) *CategoriesTable {
	return newCategoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CategoriesTable with assigned table prefix
func (a CategoriesTable) WithPrefix(prefix string) *CategoriesTable {
	return newCategoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CategoriesTable with assigned table suffix
func (a CategoriesTable) WithSuffix(suffix string) *CategoriesTable {
	return newCategoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCategoriesTable(schemaName, tableName, alias string) *CategoriesTable {
	return &CategoriesTable{
		categoriesTable: newCategoriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newCategoriesTableImpl("", "excluded", ""),
	}
}

func newCategoriesTableImpl(schemaName, tableName, alias string) categoriesTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NameColumn        = postgres.StringColumn("name")
		SlugColumn        = postgres.StringColumn("slug")
		DescriptionColumn = postgres.StringColumn("description")
		ParentColumn      = postgres.IntegerColumn("parent")
		SortColumn        = postgres.IntegerColumn("sort")
		PricingColumn     = postgres.BoolColumn("pricing")
		HiddenColumn      = postgres.BoolColumn("hidden")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, SlugColumn, DescriptionColumn, ParentColumn, SortColumn, PricingColumn, HiddenColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, SlugColumn, DescriptionColumn, ParentColumn, SortColumn, PricingColumn, HiddenColumn}
	)

	return categoriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Slug:        SlugColumn,
		Description: DescriptionColumn,
		Parent:      ParentColumn,
		Sort:        SortColumn,
		Pricing:     PricingColumn,
		Hidden:      HiddenColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
