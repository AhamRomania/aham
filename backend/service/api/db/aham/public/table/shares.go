//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Shares = newSharesTable("public", "shares", "")

type sharesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	AdID        postgres.ColumnInteger
	Description postgres.ColumnString
	Platforms   postgres.ColumnString
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SharesTable struct {
	sharesTable

	EXCLUDED sharesTable
}

// AS creates new SharesTable with assigned alias
func (a SharesTable) AS(alias string) *SharesTable {
	return newSharesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SharesTable with assigned schema name
func (a SharesTable) FromSchema(schemaName string) *SharesTable {
	return newSharesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SharesTable with assigned table prefix
func (a SharesTable) WithPrefix(prefix string) *SharesTable {
	return newSharesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SharesTable with assigned table suffix
func (a SharesTable) WithSuffix(suffix string) *SharesTable {
	return newSharesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSharesTable(schemaName, tableName, alias string) *SharesTable {
	return &SharesTable{
		sharesTable: newSharesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newSharesTableImpl("", "excluded", ""),
	}
}

func newSharesTableImpl(schemaName, tableName, alias string) sharesTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		AdIDColumn        = postgres.IntegerColumn("ad_id")
		DescriptionColumn = postgres.StringColumn("description")
		PlatformsColumn   = postgres.StringColumn("platforms")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, AdIDColumn, DescriptionColumn, PlatformsColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{AdIDColumn, DescriptionColumn, PlatformsColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return sharesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		AdID:        AdIDColumn,
		Description: DescriptionColumn,
		Platforms:   PlatformsColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
