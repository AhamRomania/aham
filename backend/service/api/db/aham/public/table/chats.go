//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Chats = newChatsTable("public", "chats", "")

type chatsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Title        postgres.ColumnString
	Context      postgres.ColumnString
	Reference    postgres.ColumnInteger
	Participants postgres.ColumnString
	Archived     postgres.ColumnString
	Deleted      postgres.ColumnString
	CreatedAt    postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ChatsTable struct {
	chatsTable

	EXCLUDED chatsTable
}

// AS creates new ChatsTable with assigned alias
func (a ChatsTable) AS(alias string) *ChatsTable {
	return newChatsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ChatsTable with assigned schema name
func (a ChatsTable) FromSchema(schemaName string) *ChatsTable {
	return newChatsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ChatsTable with assigned table prefix
func (a ChatsTable) WithPrefix(prefix string) *ChatsTable {
	return newChatsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ChatsTable with assigned table suffix
func (a ChatsTable) WithSuffix(suffix string) *ChatsTable {
	return newChatsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newChatsTable(schemaName, tableName, alias string) *ChatsTable {
	return &ChatsTable{
		chatsTable: newChatsTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newChatsTableImpl("", "excluded", ""),
	}
}

func newChatsTableImpl(schemaName, tableName, alias string) chatsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		TitleColumn        = postgres.StringColumn("title")
		ContextColumn      = postgres.StringColumn("context")
		ReferenceColumn    = postgres.IntegerColumn("reference")
		ParticipantsColumn = postgres.StringColumn("participants")
		ArchivedColumn     = postgres.StringColumn("archived")
		DeletedColumn      = postgres.StringColumn("deleted")
		CreatedAtColumn    = postgres.TimestampColumn("created_at")
		allColumns         = postgres.ColumnList{IDColumn, TitleColumn, ContextColumn, ReferenceColumn, ParticipantsColumn, ArchivedColumn, DeletedColumn, CreatedAtColumn}
		mutableColumns     = postgres.ColumnList{TitleColumn, ContextColumn, ReferenceColumn, ParticipantsColumn, ArchivedColumn, DeletedColumn, CreatedAtColumn}
	)

	return chatsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Title:        TitleColumn,
		Context:      ContextColumn,
		Reference:    ReferenceColumn,
		Participants: ParticipantsColumn,
		Archived:     ArchivedColumn,
		Deleted:      DeletedColumn,
		CreatedAt:    CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
