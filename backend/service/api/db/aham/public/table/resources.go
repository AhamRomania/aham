//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Resources = newResourcesTable("public", "resources", "")

type resourcesTable struct {
	postgres.Table

	// Columns
	ID   postgres.ColumnInteger
	Name postgres.ColumnString
	Type postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ResourcesTable struct {
	resourcesTable

	EXCLUDED resourcesTable
}

// AS creates new ResourcesTable with assigned alias
func (a ResourcesTable) AS(alias string) *ResourcesTable {
	return newResourcesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ResourcesTable with assigned schema name
func (a ResourcesTable) FromSchema(schemaName string) *ResourcesTable {
	return newResourcesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ResourcesTable with assigned table prefix
func (a ResourcesTable) WithPrefix(prefix string) *ResourcesTable {
	return newResourcesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ResourcesTable with assigned table suffix
func (a ResourcesTable) WithSuffix(suffix string) *ResourcesTable {
	return newResourcesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newResourcesTable(schemaName, tableName, alias string) *ResourcesTable {
	return &ResourcesTable{
		resourcesTable: newResourcesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newResourcesTableImpl("", "excluded", ""),
	}
}

func newResourcesTableImpl(schemaName, tableName, alias string) resourcesTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		NameColumn     = postgres.StringColumn("name")
		TypeColumn     = postgres.StringColumn("type")
		allColumns     = postgres.ColumnList{IDColumn, NameColumn, TypeColumn}
		mutableColumns = postgres.ColumnList{NameColumn, TypeColumn}
	)

	return resourcesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Name: NameColumn,
		Type: TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
