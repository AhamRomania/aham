//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Balance = newBalanceTable("public", "balance", "")

type balanceTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Owner       postgres.ColumnInteger
	Debit       postgres.ColumnInteger
	Credit      postgres.ColumnInteger
	Balance     postgres.ColumnInteger
	Description postgres.ColumnString
	Date        postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type BalanceTable struct {
	balanceTable

	EXCLUDED balanceTable
}

// AS creates new BalanceTable with assigned alias
func (a BalanceTable) AS(alias string) *BalanceTable {
	return newBalanceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BalanceTable with assigned schema name
func (a BalanceTable) FromSchema(schemaName string) *BalanceTable {
	return newBalanceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BalanceTable with assigned table prefix
func (a BalanceTable) WithPrefix(prefix string) *BalanceTable {
	return newBalanceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BalanceTable with assigned table suffix
func (a BalanceTable) WithSuffix(suffix string) *BalanceTable {
	return newBalanceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBalanceTable(schemaName, tableName, alias string) *BalanceTable {
	return &BalanceTable{
		balanceTable: newBalanceTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newBalanceTableImpl("", "excluded", ""),
	}
}

func newBalanceTableImpl(schemaName, tableName, alias string) balanceTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		OwnerColumn       = postgres.IntegerColumn("owner")
		DebitColumn       = postgres.IntegerColumn("debit")
		CreditColumn      = postgres.IntegerColumn("credit")
		BalanceColumn     = postgres.IntegerColumn("balance")
		DescriptionColumn = postgres.StringColumn("description")
		DateColumn        = postgres.TimestampColumn("date")
		allColumns        = postgres.ColumnList{IDColumn, OwnerColumn, DebitColumn, CreditColumn, BalanceColumn, DescriptionColumn, DateColumn}
		mutableColumns    = postgres.ColumnList{OwnerColumn, DebitColumn, CreditColumn, BalanceColumn, DescriptionColumn, DateColumn}
	)

	return balanceTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Owner:       OwnerColumn,
		Debit:       DebitColumn,
		Credit:      CreditColumn,
		Balance:     BalanceColumn,
		Description: DescriptionColumn,
		Date:        DateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
