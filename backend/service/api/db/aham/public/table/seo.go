//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Seo = newSeoTable("public", "seo", "")

type seoTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	URI         postgres.ColumnString
	Title       postgres.ColumnString
	Description postgres.ColumnString
	Keywords    postgres.ColumnString
	Image       postgres.ColumnString
	UpdatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SeoTable struct {
	seoTable

	EXCLUDED seoTable
}

// AS creates new SeoTable with assigned alias
func (a SeoTable) AS(alias string) *SeoTable {
	return newSeoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SeoTable with assigned schema name
func (a SeoTable) FromSchema(schemaName string) *SeoTable {
	return newSeoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SeoTable with assigned table prefix
func (a SeoTable) WithPrefix(prefix string) *SeoTable {
	return newSeoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SeoTable with assigned table suffix
func (a SeoTable) WithSuffix(suffix string) *SeoTable {
	return newSeoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSeoTable(schemaName, tableName, alias string) *SeoTable {
	return &SeoTable{
		seoTable: newSeoTableImpl(schemaName, tableName, alias),
		EXCLUDED: newSeoTableImpl("", "excluded", ""),
	}
}

func newSeoTableImpl(schemaName, tableName, alias string) seoTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		URIColumn         = postgres.StringColumn("uri")
		TitleColumn       = postgres.StringColumn("title")
		DescriptionColumn = postgres.StringColumn("description")
		KeywordsColumn    = postgres.StringColumn("keywords")
		ImageColumn       = postgres.StringColumn("image")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, URIColumn, TitleColumn, DescriptionColumn, KeywordsColumn, ImageColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{URIColumn, TitleColumn, DescriptionColumn, KeywordsColumn, ImageColumn, UpdatedAtColumn}
	)

	return seoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		URI:         URIColumn,
		Title:       TitleColumn,
		Description: DescriptionColumn,
		Keywords:    KeywordsColumn,
		Image:       ImageColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
