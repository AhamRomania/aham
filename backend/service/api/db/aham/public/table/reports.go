//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Reports = newReportsTable("public", "reports", "")

type reportsTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnInteger
	Reporter      postgres.ColumnInteger
	ReporterName  postgres.ColumnString
	ReporterEmail postgres.ColumnString
	Resource      postgres.ColumnString
	Reference     postgres.ColumnInteger
	Reason        postgres.ColumnString
	Comments      postgres.ColumnString
	Navitator     postgres.ColumnString
	IP            postgres.ColumnString
	CreatedAt     postgres.ColumnTimestamp
	Status        postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReportsTable struct {
	reportsTable

	EXCLUDED reportsTable
}

// AS creates new ReportsTable with assigned alias
func (a ReportsTable) AS(alias string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReportsTable with assigned schema name
func (a ReportsTable) FromSchema(schemaName string) *ReportsTable {
	return newReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReportsTable with assigned table prefix
func (a ReportsTable) WithPrefix(prefix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReportsTable with assigned table suffix
func (a ReportsTable) WithSuffix(suffix string) *ReportsTable {
	return newReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReportsTable(schemaName, tableName, alias string) *ReportsTable {
	return &ReportsTable{
		reportsTable: newReportsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newReportsTableImpl("", "excluded", ""),
	}
}

func newReportsTableImpl(schemaName, tableName, alias string) reportsTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		ReporterColumn      = postgres.IntegerColumn("reporter")
		ReporterNameColumn  = postgres.StringColumn("reporter_name")
		ReporterEmailColumn = postgres.StringColumn("reporter_email")
		ResourceColumn      = postgres.StringColumn("resource")
		ReferenceColumn     = postgres.IntegerColumn("reference")
		ReasonColumn        = postgres.StringColumn("reason")
		CommentsColumn      = postgres.StringColumn("comments")
		NavitatorColumn     = postgres.StringColumn("navitator")
		IPColumn            = postgres.StringColumn("ip")
		CreatedAtColumn     = postgres.TimestampColumn("created_at")
		StatusColumn        = postgres.StringColumn("status")
		allColumns          = postgres.ColumnList{IDColumn, ReporterColumn, ReporterNameColumn, ReporterEmailColumn, ResourceColumn, ReferenceColumn, ReasonColumn, CommentsColumn, NavitatorColumn, IPColumn, CreatedAtColumn, StatusColumn}
		mutableColumns      = postgres.ColumnList{ReporterColumn, ReporterNameColumn, ReporterEmailColumn, ResourceColumn, ReferenceColumn, ReasonColumn, CommentsColumn, NavitatorColumn, IPColumn, CreatedAtColumn, StatusColumn}
	)

	return reportsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Reporter:      ReporterColumn,
		ReporterName:  ReporterNameColumn,
		ReporterEmail: ReporterEmailColumn,
		Resource:      ResourceColumn,
		Reference:     ReferenceColumn,
		Reason:        ReasonColumn,
		Comments:      CommentsColumn,
		Navitator:     NavitatorColumn,
		IP:            IPColumn,
		CreatedAt:     CreatedAtColumn,
		Status:        StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
