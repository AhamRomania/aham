//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MetaAssign = newMetaAssignTable("public", "meta_assign", "")

type metaAssignTable struct {
	postgres.Table

	// Columns
	Category postgres.ColumnInteger
	Meta     postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MetaAssignTable struct {
	metaAssignTable

	EXCLUDED metaAssignTable
}

// AS creates new MetaAssignTable with assigned alias
func (a MetaAssignTable) AS(alias string) *MetaAssignTable {
	return newMetaAssignTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MetaAssignTable with assigned schema name
func (a MetaAssignTable) FromSchema(schemaName string) *MetaAssignTable {
	return newMetaAssignTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MetaAssignTable with assigned table prefix
func (a MetaAssignTable) WithPrefix(prefix string) *MetaAssignTable {
	return newMetaAssignTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MetaAssignTable with assigned table suffix
func (a MetaAssignTable) WithSuffix(suffix string) *MetaAssignTable {
	return newMetaAssignTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMetaAssignTable(schemaName, tableName, alias string) *MetaAssignTable {
	return &MetaAssignTable{
		metaAssignTable: newMetaAssignTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newMetaAssignTableImpl("", "excluded", ""),
	}
}

func newMetaAssignTableImpl(schemaName, tableName, alias string) metaAssignTable {
	var (
		CategoryColumn = postgres.IntegerColumn("category")
		MetaColumn     = postgres.IntegerColumn("meta")
		allColumns     = postgres.ColumnList{CategoryColumn, MetaColumn}
		mutableColumns = postgres.ColumnList{CategoryColumn, MetaColumn}
	)

	return metaAssignTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Category: CategoryColumn,
		Meta:     MetaColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
