//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Applications = newApplicationsTable("public", "applications", "")

type applicationsTable struct {
	postgres.Table

	// Columns
	ID      postgres.ColumnInteger
	Owner   postgres.ColumnInteger
	Name    postgres.ColumnString
	Key     postgres.ColumnString
	Enabled postgres.ColumnBool
	Created postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ApplicationsTable struct {
	applicationsTable

	EXCLUDED applicationsTable
}

// AS creates new ApplicationsTable with assigned alias
func (a ApplicationsTable) AS(alias string) *ApplicationsTable {
	return newApplicationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ApplicationsTable with assigned schema name
func (a ApplicationsTable) FromSchema(schemaName string) *ApplicationsTable {
	return newApplicationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ApplicationsTable with assigned table prefix
func (a ApplicationsTable) WithPrefix(prefix string) *ApplicationsTable {
	return newApplicationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ApplicationsTable with assigned table suffix
func (a ApplicationsTable) WithSuffix(suffix string) *ApplicationsTable {
	return newApplicationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newApplicationsTable(schemaName, tableName, alias string) *ApplicationsTable {
	return &ApplicationsTable{
		applicationsTable: newApplicationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newApplicationsTableImpl("", "excluded", ""),
	}
}

func newApplicationsTableImpl(schemaName, tableName, alias string) applicationsTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		OwnerColumn    = postgres.IntegerColumn("owner")
		NameColumn     = postgres.StringColumn("name")
		KeyColumn      = postgres.StringColumn("key")
		EnabledColumn  = postgres.BoolColumn("enabled")
		CreatedColumn  = postgres.TimestampColumn("created")
		allColumns     = postgres.ColumnList{IDColumn, OwnerColumn, NameColumn, KeyColumn, EnabledColumn, CreatedColumn}
		mutableColumns = postgres.ColumnList{OwnerColumn, NameColumn, KeyColumn, EnabledColumn, CreatedColumn}
	)

	return applicationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Owner:   OwnerColumn,
		Name:    NameColumn,
		Key:     KeyColumn,
		Enabled: EnabledColumn,
		Created: CreatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
