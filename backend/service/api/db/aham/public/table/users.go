//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnInteger
	Email                postgres.ColumnString
	Password             postgres.ColumnString
	GivenName            postgres.ColumnString
	FamilyName           postgres.ColumnString
	Phone                postgres.ColumnString
	City                 postgres.ColumnInteger
	Picture              postgres.ColumnString
	Source               postgres.ColumnString
	Role                 postgres.ColumnString
	ThirdParyAccessToken postgres.ColumnString
	EmailActivationToken postgres.ColumnString
	PhoneActivationToken postgres.ColumnString
	CreatedAt            postgres.ColumnTimestamp
	EmailActivatedAt     postgres.ColumnTimestamp
	PhoneActivatedAt     postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn                   = postgres.IntegerColumn("id")
		EmailColumn                = postgres.StringColumn("email")
		PasswordColumn             = postgres.StringColumn("password")
		GivenNameColumn            = postgres.StringColumn("given_name")
		FamilyNameColumn           = postgres.StringColumn("family_name")
		PhoneColumn                = postgres.StringColumn("phone")
		CityColumn                 = postgres.IntegerColumn("city")
		PictureColumn              = postgres.StringColumn("picture")
		SourceColumn               = postgres.StringColumn("source")
		RoleColumn                 = postgres.StringColumn("role")
		ThirdParyAccessTokenColumn = postgres.StringColumn("third_pary_access_token")
		EmailActivationTokenColumn = postgres.StringColumn("email_activation_token")
		PhoneActivationTokenColumn = postgres.StringColumn("phone_activation_token")
		CreatedAtColumn            = postgres.TimestampColumn("created_at")
		EmailActivatedAtColumn     = postgres.TimestampColumn("email_activated_at")
		PhoneActivatedAtColumn     = postgres.TimestampColumn("phone_activated_at")
		allColumns                 = postgres.ColumnList{IDColumn, EmailColumn, PasswordColumn, GivenNameColumn, FamilyNameColumn, PhoneColumn, CityColumn, PictureColumn, SourceColumn, RoleColumn, ThirdParyAccessTokenColumn, EmailActivationTokenColumn, PhoneActivationTokenColumn, CreatedAtColumn, EmailActivatedAtColumn, PhoneActivatedAtColumn}
		mutableColumns             = postgres.ColumnList{EmailColumn, PasswordColumn, GivenNameColumn, FamilyNameColumn, PhoneColumn, CityColumn, PictureColumn, SourceColumn, RoleColumn, ThirdParyAccessTokenColumn, EmailActivationTokenColumn, PhoneActivationTokenColumn, CreatedAtColumn, EmailActivatedAtColumn, PhoneActivatedAtColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		Email:                EmailColumn,
		Password:             PasswordColumn,
		GivenName:            GivenNameColumn,
		FamilyName:           FamilyNameColumn,
		Phone:                PhoneColumn,
		City:                 CityColumn,
		Picture:              PictureColumn,
		Source:               SourceColumn,
		Role:                 RoleColumn,
		ThirdParyAccessToken: ThirdParyAccessTokenColumn,
		EmailActivationToken: EmailActivationTokenColumn,
		PhoneActivationToken: PhoneActivationTokenColumn,
		CreatedAt:            CreatedAtColumn,
		EmailActivatedAt:     EmailActivatedAtColumn,
		PhoneActivatedAt:     PhoneActivatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
