//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Templates = newTemplatesTable("public", "templates", "")

type templatesTable struct {
	postgres.Table

	// Columns
	ID      postgres.ColumnInteger
	Key     postgres.ColumnString
	Subject postgres.ColumnString
	Text    postgres.ColumnString
	HTML    postgres.ColumnString
	Props   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TemplatesTable struct {
	templatesTable

	EXCLUDED templatesTable
}

// AS creates new TemplatesTable with assigned alias
func (a TemplatesTable) AS(alias string) *TemplatesTable {
	return newTemplatesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TemplatesTable with assigned schema name
func (a TemplatesTable) FromSchema(schemaName string) *TemplatesTable {
	return newTemplatesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TemplatesTable with assigned table prefix
func (a TemplatesTable) WithPrefix(prefix string) *TemplatesTable {
	return newTemplatesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TemplatesTable with assigned table suffix
func (a TemplatesTable) WithSuffix(suffix string) *TemplatesTable {
	return newTemplatesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTemplatesTable(schemaName, tableName, alias string) *TemplatesTable {
	return &TemplatesTable{
		templatesTable: newTemplatesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newTemplatesTableImpl("", "excluded", ""),
	}
}

func newTemplatesTableImpl(schemaName, tableName, alias string) templatesTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		KeyColumn      = postgres.StringColumn("key")
		SubjectColumn  = postgres.StringColumn("subject")
		TextColumn     = postgres.StringColumn("text")
		HTMLColumn     = postgres.StringColumn("html")
		PropsColumn    = postgres.StringColumn("props")
		allColumns     = postgres.ColumnList{IDColumn, KeyColumn, SubjectColumn, TextColumn, HTMLColumn, PropsColumn}
		mutableColumns = postgres.ColumnList{KeyColumn, SubjectColumn, TextColumn, HTMLColumn, PropsColumn}
	)

	return templatesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Key:     KeyColumn,
		Subject: SubjectColumn,
		Text:    TextColumn,
		HTML:    HTMLColumn,
		Props:   PropsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
