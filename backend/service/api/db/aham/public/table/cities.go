//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Cities = newCitiesTable("public", "cities", "")

type citiesTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	County    postgres.ColumnInteger
	Name      postgres.ColumnString
	OtherName postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CitiesTable struct {
	citiesTable

	EXCLUDED citiesTable
}

// AS creates new CitiesTable with assigned alias
func (a CitiesTable) AS(alias string) *CitiesTable {
	return newCitiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CitiesTable with assigned schema name
func (a CitiesTable) FromSchema(schemaName string) *CitiesTable {
	return newCitiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CitiesTable with assigned table prefix
func (a CitiesTable) WithPrefix(prefix string) *CitiesTable {
	return newCitiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CitiesTable with assigned table suffix
func (a CitiesTable) WithSuffix(suffix string) *CitiesTable {
	return newCitiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCitiesTable(schemaName, tableName, alias string) *CitiesTable {
	return &CitiesTable{
		citiesTable: newCitiesTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newCitiesTableImpl("", "excluded", ""),
	}
}

func newCitiesTableImpl(schemaName, tableName, alias string) citiesTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		CountyColumn    = postgres.IntegerColumn("county")
		NameColumn      = postgres.StringColumn("name")
		OtherNameColumn = postgres.StringColumn("other_name")
		allColumns      = postgres.ColumnList{IDColumn, CountyColumn, NameColumn, OtherNameColumn}
		mutableColumns  = postgres.ColumnList{CountyColumn, NameColumn, OtherNameColumn}
	)

	return citiesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		County:    CountyColumn,
		Name:      NameColumn,
		OtherName: OtherNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
