//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Ads = newAdsTable("public", "ads", "")

type adsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnInteger
	Slug         postgres.ColumnString
	Title        postgres.ColumnString
	Description  postgres.ColumnString
	Props        postgres.ColumnString
	Category     postgres.ColumnInteger
	Owner        postgres.ColumnInteger
	City         postgres.ColumnInteger
	Coordinates  postgres.ColumnString
	URL          postgres.ColumnString
	Tags         postgres.ColumnString
	Messages     postgres.ColumnBool
	ShowPhone    postgres.ColumnBool
	Phone        postgres.ColumnString
	Price        postgres.ColumnInteger
	Currency     postgres.ColumnString
	Pictures     postgres.ColumnString
	History      postgres.ColumnString
	Cycle        postgres.ColumnInteger
	Created      postgres.ColumnTimestamp
	Published    postgres.ColumnTimestamp
	ValidThrough postgres.ColumnTimestamp
	Status       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AdsTable struct {
	adsTable

	EXCLUDED adsTable
}

// AS creates new AdsTable with assigned alias
func (a AdsTable) AS(alias string) *AdsTable {
	return newAdsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AdsTable with assigned schema name
func (a AdsTable) FromSchema(schemaName string) *AdsTable {
	return newAdsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AdsTable with assigned table prefix
func (a AdsTable) WithPrefix(prefix string) *AdsTable {
	return newAdsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AdsTable with assigned table suffix
func (a AdsTable) WithSuffix(suffix string) *AdsTable {
	return newAdsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAdsTable(schemaName, tableName, alias string) *AdsTable {
	return &AdsTable{
		adsTable: newAdsTableImpl(schemaName, tableName, alias),
		EXCLUDED: newAdsTableImpl("", "excluded", ""),
	}
}

func newAdsTableImpl(schemaName, tableName, alias string) adsTable {
	var (
		IDColumn           = postgres.IntegerColumn("id")
		SlugColumn         = postgres.StringColumn("slug")
		TitleColumn        = postgres.StringColumn("title")
		DescriptionColumn  = postgres.StringColumn("description")
		PropsColumn        = postgres.StringColumn("props")
		CategoryColumn     = postgres.IntegerColumn("category")
		OwnerColumn        = postgres.IntegerColumn("owner")
		CityColumn         = postgres.IntegerColumn("city")
		CoordinatesColumn  = postgres.StringColumn("coordinates")
		URLColumn          = postgres.StringColumn("url")
		TagsColumn         = postgres.StringColumn("tags")
		MessagesColumn     = postgres.BoolColumn("messages")
		ShowPhoneColumn    = postgres.BoolColumn("show_phone")
		PhoneColumn        = postgres.StringColumn("phone")
		PriceColumn        = postgres.IntegerColumn("price")
		CurrencyColumn     = postgres.StringColumn("currency")
		PicturesColumn     = postgres.StringColumn("pictures")
		HistoryColumn      = postgres.StringColumn("history")
		CycleColumn        = postgres.IntegerColumn("cycle")
		CreatedColumn      = postgres.TimestampColumn("created")
		PublishedColumn    = postgres.TimestampColumn("published")
		ValidThroughColumn = postgres.TimestampColumn("valid_through")
		StatusColumn       = postgres.StringColumn("status")
		allColumns         = postgres.ColumnList{IDColumn, SlugColumn, TitleColumn, DescriptionColumn, PropsColumn, CategoryColumn, OwnerColumn, CityColumn, CoordinatesColumn, URLColumn, TagsColumn, MessagesColumn, ShowPhoneColumn, PhoneColumn, PriceColumn, CurrencyColumn, PicturesColumn, HistoryColumn, CycleColumn, CreatedColumn, PublishedColumn, ValidThroughColumn, StatusColumn}
		mutableColumns     = postgres.ColumnList{SlugColumn, TitleColumn, DescriptionColumn, PropsColumn, CategoryColumn, OwnerColumn, CityColumn, CoordinatesColumn, URLColumn, TagsColumn, MessagesColumn, ShowPhoneColumn, PhoneColumn, PriceColumn, CurrencyColumn, PicturesColumn, HistoryColumn, CycleColumn, CreatedColumn, PublishedColumn, ValidThroughColumn, StatusColumn}
	)

	return adsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Slug:         SlugColumn,
		Title:        TitleColumn,
		Description:  DescriptionColumn,
		Props:        PropsColumn,
		Category:     CategoryColumn,
		Owner:        OwnerColumn,
		City:         CityColumn,
		Coordinates:  CoordinatesColumn,
		URL:          URLColumn,
		Tags:         TagsColumn,
		Messages:     MessagesColumn,
		ShowPhone:    ShowPhoneColumn,
		Phone:        PhoneColumn,
		Price:        PriceColumn,
		Currency:     CurrencyColumn,
		Pictures:     PicturesColumn,
		History:      HistoryColumn,
		Cycle:        CycleColumn,
		Created:      CreatedColumn,
		Published:    PublishedColumn,
		ValidThrough: ValidThroughColumn,
		Status:       StatusColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
