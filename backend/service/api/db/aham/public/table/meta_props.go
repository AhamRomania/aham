//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MetaProps = newMetaPropsTable("public", "meta_props", "")

type metaPropsTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	Name        postgres.ColumnString
	Title       postgres.ColumnString
	Group       postgres.ColumnString
	Sort        postgres.ColumnInteger
	Required    postgres.ColumnBool
	Template    postgres.ColumnString
	Description postgres.ColumnString
	Help        postgres.ColumnString
	Type        postgres.ColumnString
	Options     postgres.ColumnString
	Microdata   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MetaPropsTable struct {
	metaPropsTable

	EXCLUDED metaPropsTable
}

// AS creates new MetaPropsTable with assigned alias
func (a MetaPropsTable) AS(alias string) *MetaPropsTable {
	return newMetaPropsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MetaPropsTable with assigned schema name
func (a MetaPropsTable) FromSchema(schemaName string) *MetaPropsTable {
	return newMetaPropsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MetaPropsTable with assigned table prefix
func (a MetaPropsTable) WithPrefix(prefix string) *MetaPropsTable {
	return newMetaPropsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MetaPropsTable with assigned table suffix
func (a MetaPropsTable) WithSuffix(suffix string) *MetaPropsTable {
	return newMetaPropsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMetaPropsTable(schemaName, tableName, alias string) *MetaPropsTable {
	return &MetaPropsTable{
		metaPropsTable: newMetaPropsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newMetaPropsTableImpl("", "excluded", ""),
	}
}

func newMetaPropsTableImpl(schemaName, tableName, alias string) metaPropsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		NameColumn        = postgres.StringColumn("name")
		TitleColumn       = postgres.StringColumn("title")
		GroupColumn       = postgres.StringColumn("group")
		SortColumn        = postgres.IntegerColumn("sort")
		RequiredColumn    = postgres.BoolColumn("required")
		TemplateColumn    = postgres.StringColumn("template")
		DescriptionColumn = postgres.StringColumn("description")
		HelpColumn        = postgres.StringColumn("help")
		TypeColumn        = postgres.StringColumn("type")
		OptionsColumn     = postgres.StringColumn("options")
		MicrodataColumn   = postgres.StringColumn("microdata")
		allColumns        = postgres.ColumnList{IDColumn, NameColumn, TitleColumn, GroupColumn, SortColumn, RequiredColumn, TemplateColumn, DescriptionColumn, HelpColumn, TypeColumn, OptionsColumn, MicrodataColumn}
		mutableColumns    = postgres.ColumnList{NameColumn, TitleColumn, GroupColumn, SortColumn, RequiredColumn, TemplateColumn, DescriptionColumn, HelpColumn, TypeColumn, OptionsColumn, MicrodataColumn}
	)

	return metaPropsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Name:        NameColumn,
		Title:       TitleColumn,
		Group:       GroupColumn,
		Sort:        SortColumn,
		Required:    RequiredColumn,
		Template:    TemplateColumn,
		Description: DescriptionColumn,
		Help:        HelpColumn,
		Type:        TypeColumn,
		Options:     OptionsColumn,
		Microdata:   MicrodataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
