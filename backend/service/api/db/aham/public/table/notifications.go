//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Notifications = newNotificationsTable("public", "notifications", "")

type notificationsTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnInteger
	Variant  postgres.ColumnString
	Title    postgres.ColumnString
	Contents postgres.ColumnString
	Href     postgres.ColumnString
	Actions  postgres.ColumnString
	Seen     postgres.ColumnTimestamp
	Created  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NotificationsTable struct {
	notificationsTable

	EXCLUDED notificationsTable
}

// AS creates new NotificationsTable with assigned alias
func (a NotificationsTable) AS(alias string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NotificationsTable with assigned schema name
func (a NotificationsTable) FromSchema(schemaName string) *NotificationsTable {
	return newNotificationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NotificationsTable with assigned table prefix
func (a NotificationsTable) WithPrefix(prefix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NotificationsTable with assigned table suffix
func (a NotificationsTable) WithSuffix(suffix string) *NotificationsTable {
	return newNotificationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNotificationsTable(schemaName, tableName, alias string) *NotificationsTable {
	return &NotificationsTable{
		notificationsTable: newNotificationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newNotificationsTableImpl("", "excluded", ""),
	}
}

func newNotificationsTableImpl(schemaName, tableName, alias string) notificationsTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		VariantColumn  = postgres.StringColumn("variant")
		TitleColumn    = postgres.StringColumn("title")
		ContentsColumn = postgres.StringColumn("contents")
		HrefColumn     = postgres.StringColumn("href")
		ActionsColumn  = postgres.StringColumn("actions")
		SeenColumn     = postgres.TimestampColumn("seen")
		CreatedColumn  = postgres.TimestampColumn("created")
		allColumns     = postgres.ColumnList{IDColumn, VariantColumn, TitleColumn, ContentsColumn, HrefColumn, ActionsColumn, SeenColumn, CreatedColumn}
		mutableColumns = postgres.ColumnList{VariantColumn, TitleColumn, ContentsColumn, HrefColumn, ActionsColumn, SeenColumn, CreatedColumn}
	)

	return notificationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		Variant:  VariantColumn,
		Title:    TitleColumn,
		Contents: ContentsColumn,
		Href:     HrefColumn,
		Actions:  ActionsColumn,
		Seen:     SeenColumn,
		Created:  CreatedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
