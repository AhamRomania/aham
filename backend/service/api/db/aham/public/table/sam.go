//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Sam = newSamTable("public", "sam", "")

type samTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnInteger
	UserID     postgres.ColumnInteger
	ResourceID postgres.ColumnInteger
	Permission postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SamTable struct {
	samTable

	EXCLUDED samTable
}

// AS creates new SamTable with assigned alias
func (a SamTable) AS(alias string) *SamTable {
	return newSamTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SamTable with assigned schema name
func (a SamTable) FromSchema(schemaName string) *SamTable {
	return newSamTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SamTable with assigned table prefix
func (a SamTable) WithPrefix(prefix string) *SamTable {
	return newSamTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SamTable with assigned table suffix
func (a SamTable) WithSuffix(suffix string) *SamTable {
	return newSamTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSamTable(schemaName, tableName, alias string) *SamTable {
	return &SamTable{
		samTable: newSamTableImpl(schemaName, tableName, alias),
		EXCLUDED: newSamTableImpl("", "excluded", ""),
	}
}

func newSamTableImpl(schemaName, tableName, alias string) samTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		UserIDColumn     = postgres.IntegerColumn("user_id")
		ResourceIDColumn = postgres.IntegerColumn("resource_id")
		PermissionColumn = postgres.IntegerColumn("permission")
		allColumns       = postgres.ColumnList{IDColumn, UserIDColumn, ResourceIDColumn, PermissionColumn}
		mutableColumns   = postgres.ColumnList{UserIDColumn, ResourceIDColumn, PermissionColumn}
	)

	return samTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		UserID:     UserIDColumn,
		ResourceID: ResourceIDColumn,
		Permission: PermissionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
