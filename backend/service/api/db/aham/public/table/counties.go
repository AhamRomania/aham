//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Counties = newCountiesTable("public", "counties", "")

type countiesTable struct {
	postgres.Table

	// Columns
	ID   postgres.ColumnInteger
	Auto postgres.ColumnString
	Name postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CountiesTable struct {
	countiesTable

	EXCLUDED countiesTable
}

// AS creates new CountiesTable with assigned alias
func (a CountiesTable) AS(alias string) *CountiesTable {
	return newCountiesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CountiesTable with assigned schema name
func (a CountiesTable) FromSchema(schemaName string) *CountiesTable {
	return newCountiesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CountiesTable with assigned table prefix
func (a CountiesTable) WithPrefix(prefix string) *CountiesTable {
	return newCountiesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CountiesTable with assigned table suffix
func (a CountiesTable) WithSuffix(suffix string) *CountiesTable {
	return newCountiesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCountiesTable(schemaName, tableName, alias string) *CountiesTable {
	return &CountiesTable{
		countiesTable: newCountiesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newCountiesTableImpl("", "excluded", ""),
	}
}

func newCountiesTableImpl(schemaName, tableName, alias string) countiesTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		AutoColumn     = postgres.StringColumn("auto")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{IDColumn, AutoColumn, NameColumn}
		mutableColumns = postgres.ColumnList{AutoColumn, NameColumn}
	)

	return countiesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:   IDColumn,
		Auto: AutoColumn,
		Name: NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
